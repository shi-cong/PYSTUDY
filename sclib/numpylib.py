import numpy


#################################################################################################################################
#               矩                       阵                      操                     作                                                                                                       ##
#################################################################################################################################
"""
相关参数：
1. shape 可以是int类型数据，或者是int类型的序列。表示新的数组的大小
2. dtype 数组数据类型，默认为float
3. order 在内存中排列的方式（以C语言或Fortran语言方式排列），默认为C语言排列
"""

array = numpy.array

zeros = numpy.zeros
"""
创建给定类型的矩阵，并初始化为0
"""


zeros_like = numpy.zeros_like
"""
返回和输入大小相同，类型相同，用0填满的数组
"""

    
ones_like = numpy.ones_like
"""
返回和输入大小相同，数据类型相同，用1填满的数组
"""
    
    
empty_like = numpy.empty_like
"""
返回和输入大小相同，数据类型相同，但是是未初始化的数组(数据随机)
"""


ones = numpy.ones
"""
返回一个和输入大小相同，数据类型相同，初始化为1的数组
"""
    
empty = numpy.empty
"""
返回一个新的未初始化的数组
"""


if __name__ == '__main__':
    # 1. 创建默认数据类型为float的矩阵
    # 一维数组，大小为3，默认为0
    print(zeros(3))         # array([0., 0., 0.])
    # 二维数组，大小为3， 默认为0
    print(zeros((2, 3)))
    """
    array([[0., 0., 0.],
           [0., 0., 0.]])
    """
    # 2. zeros_like 调用实例
    a = array([2, 3])
    print(a)
    """
    array([2, 3])
    """

    print(zeros_like(a))
    """
    array([0, 0])
    """

    # 3. ones_like 调用实例
    a = array([2, 3])   # array([2, 3])
    print(ones_like(a))
    """
    array([1, 1])
    """

    # 4. empty_like 调用实例
    pass